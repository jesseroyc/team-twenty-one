{"version":3,"sources":["serviceWorker.js","client/pages/helpers/loadData.js","client/routes/index.js","client/pages/Home.js","client/pages/Todos.js","client/pages/NotFound.js","index.js","client/App.js"],"names":["Boolean","window","location","hostname","match","helpers_loadData","resourceType","fetch","concat","then","res","json","data","filter","_","idx","Routes","path","exact","component","props","react_default","a","createElement","name","Todos","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","staticContext","state","_this2","setTimeout","__ROUTE_DATA__","setState","loadData","map","todo","key","id","title","React","Component","_ref","_ref$staticContext","status","ReactDOM","hydrate","BrowserRouter","NavLink","to","Switch","renderRoutes","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8MAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,+HChBSC,SAAA,SAAAC,GACb,OAAOC,MAAK,wCAAAC,OAAyCF,IAClDG,KAAK,SAAAC,GACJ,OAAOA,EAAIC,SAEZF,KAAK,SAAAG,GAEJ,OAAOA,EAAKC,OAAO,SAACC,EAAGC,GAAJ,OAAYA,EAAM,SCa5BC,EAhBA,CACb,CACEC,KAAM,IACNC,OAAO,EACPC,UCRW,SAAAC,GACb,OAAOC,EAAAC,EAAAC,cAAA,mBAAWH,EAAMI,KAAjB,ODSP,CACEP,KAAM,SACNE,sBEVF,SAAAM,EAAYL,GAAO,IAAAM,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMT,IAEFA,EAAMa,eAAiBb,EAAMa,cAAcrB,KAC7Cc,EAAKQ,MAAQ,CACXtB,KAAMQ,EAAMa,cAAcrB,MAG5Bc,EAAKQ,MAAQ,CACXtB,KAAM,IATOc,mFAcC,IAAAS,EAAAN,KAClBO,WAAW,WACLnC,OAAOoC,gBACTF,EAAKG,SAAS,CACZ1B,KAAMX,OAAOoC,wBAERpC,OAAOoC,gBAEdE,EAAS,SAAS9B,KAAK,SAAAG,GACrBuB,EAAKG,SAAS,CACZ1B,YAIL,oCAGI,IACCA,EAASiB,KAAKK,MAAdtB,KACR,OAAOS,EAAAC,EAAAC,cAAA,UAAKX,EAAK4B,IAAI,SAAAC,GAAI,OAAIpB,EAAAC,EAAAC,cAAA,MAAImB,IAAKD,EAAKE,IAAKF,EAAKG,iBAlCrCC,IAAMC,WFYtBP,SAAU,kBAAMA,EAAS,WAE3B,CACEpB,UGhBW,SAAA4B,GAA4B,IAAAC,EAAAD,EAAzBd,cAEhB,YAFyC,IAAAe,EAAT,GAASA,GAC3BC,OAAS,IAChB5B,EAAAC,EAAAC,cAAA,oCCIT2B,IAASC,QACP9B,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,KACE/B,EAAAC,EAAAC,cCJW,SAAAH,GACb,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAASC,GAAG,KAAZ,SAEFjC,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAASC,GAAG,UAAZ,WAIJjC,EAAAC,EAAAC,cAACgC,EAAA,EAAD,KACGC,YAAaxC,MDTlB,OAEFyC,SAASC,eAAe,SNqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpD,KAAK,SAAAqD,GACjCA,EAAaC","file":"static/js/main.f9d3342b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'isomorphic-fetch';\n\nexport default resourceType => {\n  return fetch(`https://jsonplaceholder.typicode.com/${resourceType}`)\n    .then(res => {\n      return res.json();\n    })\n    .then(data => {\n      // only keep 10 first results\n      return data.filter((_, idx) => idx < 10);\n    });\n};","import Home from '../pages/Home';\nimport Todos from '../pages/Todos';\nimport NotFound from '../pages/NotFound';\n\nimport loadData from '../pages/helpers/loadData';\n\nconst Routes = [\n  {\n    path: '/',\n    exact: true,\n    component: Home\n  },\n  {\n    path: '/todos',\n    component: Todos,\n    loadData: () => loadData('todos')\n  },\n  {\n    component: NotFound\n  }\n];\n\nexport default Routes;","import React from 'react';\n\nexport default props => {\n  return <h1>Hello {props.name}!</h1>;\n};","import React from 'react';\nimport loadData from './helpers/loadData';\n\nclass Todos extends React.Component {\n  constructor(props) {\n    super(props);\n\n    if (props.staticContext && props.staticContext.data) {\n      this.state = {\n        data: props.staticContext.data\n      };\n    } else {\n      this.state = {\n        data: []\n      };\n    }\n  }\n\n  componentDidMount() {\n    setTimeout(() => {\n      if (window.__ROUTE_DATA__) {\n        this.setState({\n          data: window.__ROUTE_DATA__\n        });\n        delete window.__ROUTE_DATA__;\n      } else {\n        loadData('todos').then(data => {\n          this.setState({\n            data\n          });\n        });\n      }\n    }, 0);\n  }\n\n  render() {\n    const { data } = this.state;\n    return <ul>{data.map(todo => <li key={todo.id}>{todo.title}</li>)}</ul>;\n  }\n}\n\nexport default Todos;","import React from 'react';\n\nexport default ({ staticContext = {} }) => {\n  staticContext.status = 404;\n  return <h1>Oops, nothing here!</h1>;\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { BrowserRouter } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './client/App';\n\nReactDOM.hydrate(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();","import React from 'react';\nimport { renderRoutes } from 'react-router-config';\nimport { Switch, NavLink } from 'react-router-dom';\n\nimport Routes from './routes/index';\n\nexport default props => {\n  return (\n    <div>\n      <ul>\n        <li>\n          <NavLink to=\"/\">Home</NavLink>\n        </li>\n        <li>\n          <NavLink to=\"/todos\">Todos</NavLink>\n        </li>\n      </ul>\n\n      <Switch>\n        {renderRoutes(Routes)}\n      </Switch>\n    </div>\n  );\n};"],"sourceRoot":""}