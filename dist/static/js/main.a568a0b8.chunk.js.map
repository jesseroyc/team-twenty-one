{"version":3,"sources":["logo.svg","routes/index.js","pages/App.js","pages/NotFound.js","serviceWorker.js","index.js","App.js"],"names":["module","exports","__webpack_require__","p","Routes","path","exact","component","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","chartData","_this2","setInterval","fetch","then","responseText","text","response","_console","tmp","JSON","parse","console","log","a","prop","push","w","length","h","Array","i","j","t","transpose","apply","concat","toConsumableArray","setState","react_default","createElement","className","index_esm","width","height","chartType","loader","data","options","chartArea","pointSize","animation","duration","easing","vAxis","viewWindow","max","min","hAxis","legend","position","title","subtitle","Component","_ref","_ref$staticContext","staticContext","status","Boolean","window","location","hostname","match","ReactDOM","hydrate","react_router_dom","react_router","renderRoutes","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,iOCczBC,eAXA,CACb,CACEC,KAAM,IACNC,OAAO,EACPC,sBCCF,SAAAC,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CAAEC,UAAY,CAAC,CAAC,OAAQ,cAAe,WAAY,WAAY,cAF3DR,mFAKC,IAAAS,EAAAN,KAElBO,YAAY,WAEVC,MAAM,yCACLC,KAAK,SAACC,GAAD,OAAkBA,EAAaC,SACpCF,KAAK,SAACG,GAAa,IAAAC,EACdC,EAAMC,KAAKC,MAAMJ,GACrBK,QAAQC,IAAIJ,GACZ,IAAIK,EAAI,GAAI,IAAI,IAAIC,KAAQN,EAAKK,EAAEE,KAAKP,EAAIM,IAC5CH,QAAQC,IAAIC,GACZL,EAUF,SAAmBK,GAEjB,IAAIG,EAAIH,EAAEI,QAAU,EAChBC,EAAIL,EAAE,aAAcM,MAAQN,EAAE,GAAGI,OAAS,EAE9C,GAAS,IAANC,GAAiB,IAANF,EAAW,MAAO,GAC9B,IAAII,EAAGC,EAAGC,EAAI,GAEhB,IAAIF,EAAE,EAAGA,EAAEF,EAAGE,IAEZ,IADAE,EAAEF,GAAK,GACHC,EAAE,EAAGA,EAAEL,EAAGK,IACZC,EAAEF,GAAGC,GAAKR,EAAEQ,GAAGD,GAGnB,OAAOE,EAxBDC,CAAUV,GAChBF,QAAQC,IAAIJ,IACZD,EAAAI,SAAQC,IAARY,MAAAjB,EAAA,CAAY,CAAC,OAAQ,cAAe,WAAY,WAAY,aAA5DkB,OAAAjC,OAAAkC,EAAA,EAAAlC,CAA2EgB,KAC3ER,EAAK2B,SAAS,CAAE5B,UAAS,CACvB,CAAC,OAAQ,cAAe,WAAY,WAAY,aADzB0B,OAAAjC,OAAAkC,EAAA,EAAAlC,CAElBgB,SAqBR,sCAIH,OACEoB,EAAAf,EAAAgB,cAAA,OAAKC,UAAU,OACbF,EAAAf,EAAAgB,cAAA,UAAQC,UAAU,cAChBF,EAAAf,EAAAgB,cAACE,EAAA,EAAD,CACEC,MAAO,QACPC,OAAQ,QACRC,UAAU,OACVC,OAAQP,EAAAf,EAAAgB,cAAA,4BACRO,KAAM1C,KAAKI,MAAMC,UACjBsC,QAAS,CACPC,UAAW,CACTN,MAAO,MACPC,OAAQ,OAEVM,UAAW,EACXC,UAAW,CACTC,SAAU,IACVC,OAAQ,MAEVC,MAAO,CACLC,WAAY,CACVC,KAAM,GACNC,IAAK,MAGTC,MAAO,CACLH,WAAY,CACVC,IAAK,IACLC,KAAM,KAGVE,OAAQ,CAAEC,SAAU,SACpBC,MAAO,qDACPC,SAAU,wBAjFNC,cDGhB,CACEhE,UERW,SAAAiE,GAA4B,IAAAC,EAAAD,EAAzBE,cAEhB,YAFyC,IAAAD,EAAT,GAASA,GAC3BE,OAAS,IAChB5B,EAAAf,EAAAgB,cAAA,yCCQW4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,QACPnC,EAAAf,EAAAgB,cAACmC,EAAA,EAAD,KACEpC,EAAAf,EAAAgB,cCJW,SAAAvC,GACb,OACEsC,EAAAf,EAAAgB,cAAA,WACED,EAAAf,EAAAgB,cAACoC,EAAA,EAAD,KACGC,YAAajF,MDAlB,OAEFkF,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpE,KAAK,SAAAqE,GACjCA,EAAaC","file":"static/js/main.a568a0b8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import App from '../pages/App';\nimport NotFound from '../pages/NotFound';\n\nconst Routes = [\n  {\n    path: '/',\n    exact: true,\n    component: App\n  },\n  {\n    component: NotFound\n  },\n];\n\nexport default Routes;","import React, { Component } from 'react';\nimport logo from '../logo.svg';\nimport Chart from 'react-google-charts';\nimport './App.css';\nimport 'isomorphic-fetch';\n\nclass App extends Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = { chartData : [['Time', 'Temperature', 'Moisture', 'Humidity', 'Pressure']] };\n  }\n  \n  componentDidMount() {\n\n    setInterval(() => {\n      \n      fetch('http://www.team-twenty-one.com/record')\n      .then((responseText) => responseText.text())\n      .then((response) => {\n        let tmp = JSON.parse(response);\n        console.log(tmp);\n        let a = []; for(let prop in tmp){a.push(tmp[prop])}\n        console.log(a);\n        tmp = transpose(a);\n        console.log(tmp);\n        console.log(['Time', 'Temperature', 'Moisture', 'Humidity', 'Pressure'],...tmp);\n        this.setState({ chartData: [\n          ['Time', 'Temperature', 'Moisture', 'Humidity', 'Pressure'],\n            ...tmp,\n            ]\n        });\n      });\n      \n      function transpose(a) {\n\n        var w = a.length || 0;\n        var h = a[0] instanceof Array ? a[0].length : 0;\n\n        if(h === 0 || w === 0) { return []; }\n          var i, j, t = [];\n          \n        for(i=0; i<h; i++) {\n          t[i] = [];\n          for(j=0; j<w; j++) {\n            t[i][j] = a[j][i];\n          }\n        }\n        return t;\n      }\n    }, 5000);\n  }\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Chart\n            width={'500px'}\n            height={'300px'}\n            chartType=\"Line\"\n            loader={<div>Loading Chart</div>}\n            data={this.state.chartData}\n            options={{\n              chartArea: {\n                width: '85%',\n                height: '85%',\n              },\n              pointSize: 5,\n              animation: {\n                duration: 1000,\n                easing: 'in'\n              },\n              vAxis: {\n                viewWindow: {\n                  max: -10,\n                  min: 100,\n                },\n              },\n              hAxis: {\n                viewWindow: {\n                  max: 100,\n                  min: -10,\n                },\n              },\n              legend: { position: 'right' },\n              title: 'Temperature, Moisture, Humidity, Pressure and Time',\n              subtitle: 'Plant Hub',\n            }}\n          />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\n\nexport default ({ staticContext = {} }) => {\n  staticContext.status = 404;\n  return <h1>Oops 404, nothing here!</h1>;\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.hydrate(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { renderRoutes } from 'react-router-config';\nimport { Switch } from 'react-router-dom';\nimport Routes from './routes/index';\n\nexport default props => {\n  return (\n    <div>\n      <Switch>\n        {renderRoutes(Routes)}\n      </Switch>\n    </div>\n  );\n};\n"],"sourceRoot":""}